// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/jlevesy/kudo/pkg/apis/k8s.kudo.dev/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeEscalationPolicies implements EscalationPolicyInterface
type FakeEscalationPolicies struct {
	Fake *FakeK8sV1alpha1
}

var escalationpoliciesResource = schema.GroupVersionResource{Group: "k8s.kudo.dev", Version: "v1alpha1", Resource: "escalationpolicies"}

var escalationpoliciesKind = schema.GroupVersionKind{Group: "k8s.kudo.dev", Version: "v1alpha1", Kind: "EscalationPolicy"}

// Get takes name of the escalationPolicy, and returns the corresponding escalationPolicy object, and an error if there is any.
func (c *FakeEscalationPolicies) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.EscalationPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(escalationpoliciesResource, name), &v1alpha1.EscalationPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.EscalationPolicy), err
}

// List takes label and field selectors, and returns the list of EscalationPolicies that match those selectors.
func (c *FakeEscalationPolicies) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.EscalationPolicyList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(escalationpoliciesResource, escalationpoliciesKind, opts), &v1alpha1.EscalationPolicyList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.EscalationPolicyList{ListMeta: obj.(*v1alpha1.EscalationPolicyList).ListMeta}
	for _, item := range obj.(*v1alpha1.EscalationPolicyList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested escalationPolicies.
func (c *FakeEscalationPolicies) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(escalationpoliciesResource, opts))
}

// Create takes the representation of a escalationPolicy and creates it.  Returns the server's representation of the escalationPolicy, and an error, if there is any.
func (c *FakeEscalationPolicies) Create(ctx context.Context, escalationPolicy *v1alpha1.EscalationPolicy, opts v1.CreateOptions) (result *v1alpha1.EscalationPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(escalationpoliciesResource, escalationPolicy), &v1alpha1.EscalationPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.EscalationPolicy), err
}

// Update takes the representation of a escalationPolicy and updates it. Returns the server's representation of the escalationPolicy, and an error, if there is any.
func (c *FakeEscalationPolicies) Update(ctx context.Context, escalationPolicy *v1alpha1.EscalationPolicy, opts v1.UpdateOptions) (result *v1alpha1.EscalationPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(escalationpoliciesResource, escalationPolicy), &v1alpha1.EscalationPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.EscalationPolicy), err
}

// Delete takes name of the escalationPolicy and deletes it. Returns an error if one occurs.
func (c *FakeEscalationPolicies) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(escalationpoliciesResource, name, opts), &v1alpha1.EscalationPolicy{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeEscalationPolicies) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(escalationpoliciesResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.EscalationPolicyList{})
	return err
}

// Patch applies the patch and returns the patched escalationPolicy.
func (c *FakeEscalationPolicies) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.EscalationPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(escalationpoliciesResource, name, pt, data, subresources...), &v1alpha1.EscalationPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.EscalationPolicy), err
}
